{"version":3,"sources":["logo.svg","components/CreateApi.js","components/EditApi.js","components/ApiList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CreateApi","props","state","api_endpoint","api_proprietary","api_description","onChangeApiDescription","bind","onChangeApiProprietary","onChangeApiEndpoint","onSubmit","e","this","setState","target","value","preventDefault","newApi","axios","post","then","res","console","log","data","style","marginTop","className","type","onChange","Component","EditApi","Api","api","ApiList","apis","get","catch","err","map","i","key","apiList","App","src","logo","width","height","alt","to","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.393d6722.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7836e3c1.svg\";","import React, {Component} from 'react'\nimport axios from 'axios'\n\nexport default class CreateApi extends Component {\n\n    constructor(props) { \n        super(props)\n\n        this.state = {\n            api_endpoint: '',\n            api_proprietary: '',\n            api_description: '',\n        }\n\n        this.onChangeApiDescription = this.onChangeApiDescription.bind(this);\n        this.onChangeApiProprietary = this.onChangeApiProprietary.bind(this);\n        this.onChangeApiEndpoint = this.onChangeApiEndpoint.bind(this)\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onChangeApiEndpoint(e) { \n        this.setState({\n            api_endpoint: e.target.value\n        })\n    }\n\n    onChangeApiProprietary(e) { \n        this.setState({\n            api_proprietary: e.target.value\n        })\n    }\n\n    onChangeApiDescription(e) {\n        this.setState({\n            api_description:  e.target.value\n        })\n    }\n\n    onSubmit(e) { \n        e.preventDefault()\n\n        const newApi = {\n            api_description: this.state.api_description,\n            api_endpoint: this.state.api_endpoint,\n            api_proprietary: this.state.api_proprietary\n        }\n\n        axios.post('http://ec2-54-242-182-148.compute-1.amazonaws.com/apis/add', newApi)\n             .then(res => console.log(res.data)) \n\n        this.setState({\n            api_endpoint: '', \n            api_proprietary: '',\n            api_description: '', \n        })\n    }\n\n\n    render() {\n        return (\n            <div style={{marginTop: 10}}>\n                <h3>Create New Api Endpoint!</h3>\n                <form onSubmit={this.onSubmit}>\n\n                    <div className=\"form-group\">\n                        <label> Endpoint: </label>\n                        <input type=\"text\"\n                              className=\"form-control\"\n                              value={this.state.api_endpoint}\n                              onChange={this.onChangeApiEndpoint}\n                              />\n                    </div>\n\n                    <div className=\"form-group\"> \n                        <label>Description: </label>\n                        <input  type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.api_description}\n                                onChange={this.onChangeApiDescription}\n                                />\n                    </div>\n                    <div className=\"form-group\">\n                        <label> Proprietary:  </label>\n                        <input \n                                type=\"text\" \n                                className=\"form-control\"\n                                value={this.state.api_proprietary}\n                                onChange={this.onChangeApiProprietary}\n                                />\n                    </div>\n                   \n                    \n\n                    <div className=\"form-group\">\n                        <input type=\"submit\" value=\"Create Api!\" className=\"btn btn-primary\" />\n                    </div>\n                </form>\n            </div>\n        )\n    } \n    \n}\n","import React, {Component} from 'react';\n\nexport default class EditApi extends Component { \n    render() {\n        return (\n            <div> \n                <p> Edit your Api </p>\n            </div>\n        )\n    }\n}","import React, {Component} from \"react\"\nimport {Link} from 'react-router-dom'\nimport axios from 'axios'\n\n\nconst Api = props => { \n    return (\n        <tr> \n            <td> {props.api.api_endpoint} </td> \n            <td> {props.api.api_proprietary} </td>\n            <td> {props.api.api_description} </td> \n        </tr>\n    )\n}\n\nexport default class ApiList extends Component {\n    constructor(props) { \n        super(props)\n\n        this.state = {\n            apis: []\n        }\n    }\n    // fetch('/apis')\n\n\n    componentDidMount() {\n    axios.get('http://ec2-54-242-182-148.compute-1.amazonaws.com/apis/')\n    .then(res => { \n            this.setState({apis: res.data})\n        })\n        .catch( err => { \n            console.log(err)\n        })\n    }\n    \n\n    apiList() { \n        return this.state.apis.map( (api, i) => { \n            return <Api api={api} key={i} />\n        })\n    }\n\n\n    render() { \n        return (\n            <div>\n                <h3> Listed Apis! </h3>\n                <table className=\"table table-striped\" style={{ marginTop: 20 }} >\n                    <thead>\n                        <tr>\n                            <th>Endpoint</th>\n                            <th>Proprietary </th>\n                            <th>Description</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { this.apiList() }\n                    </tbody>\n                </table>\n            </div>\n        ) \n    }\n}\n","import React, {Component} from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport CreateApi from './components/CreateApi'\nimport EditApi from './components/EditApi'\nimport ApiList from './components/ApiList'\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport logo from './logo.svg'\n\nfunction App() {\n  return (\n    <Router>\n        <div className=\"container\">\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <img src={logo} width=\"30\" height=\"30\" alt=\"api logo\" />\n            <Link to=\"/\" className=\"navbar-brand\"> HONEY API</Link>\n            <div className=\"collpase navbar-collapse\">\n              <ul className=\"navbar-nav mr-auto\">\n                <li className=\"navbar-item\">\n                  <Link to=\"/\" className=\"nav-link\"> Apis</Link>\n                </li>\n                <li className=\"navbar-item\">\n                  <Link to=\"/create\" className=\"nav-link\">Create Endpoint </Link>\n                </li>\n              </ul>\n            </div>\n          </nav>\n          <br/>\n          <Route path=\"/\" exact component={ApiList} />\n          <Route path=\"/edit/:id\" component={EditApi} />\n          <Route path=\"/create\" component={CreateApi} />\n        </div>\n      </Router>\n  \n      );\n      \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}